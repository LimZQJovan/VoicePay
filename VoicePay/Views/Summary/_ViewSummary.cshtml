@model TransactionViewModel

@using (Html.BeginForm())
{
    <label>
        @Html.LabelFor(model => model.FilterDate)
        @Html.EditorFor(model => model.FilterDate, new { htmlAttributes = new { @class = "datepicker" } })
    </label>

    <label>
        @Html.LabelFor(model => model.FilterMonth)
        @Html.DropDownListFor(model => model.FilterMonth, Enumerable.Range(1, 12).Select(x =>
    new SelectListItem()
    {
    Text = x.ToString(),
    Value = x.ToString()
    }), "Select Month")
    </label>

    <label>
        @Html.LabelFor(model => model.FilterYear)
        @Html.TextBoxFor(model => model.FilterYear, new { placeholder = "Enter Year" })
    </label>

    <input type="submit" value="Apply Filter" />
}

<!-- Display summary based on the selected filters -->
@if (Model.Transactions != null)
{
    <table>
        <!-- Display your table headers here -->
        @foreach (var transaction in Model.Transactions)
        {
            <!-- Display your table rows based on the filtered data -->
        }
    </table>
}

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        $('form').submit(function (event) {
            // Prevent the form from submitting normally
            event.preventDefault();

            // Get the selected values from the form
            var selectedDate = $('#FilterDate').val();
            var selectedMonth = $('#FilterMonth').val();
            var selectedYear = $('#FilterYear').val();

            // Your logic to filter data based on selected filters
            // For demonstration purposes, alerting the selected values
            alert("Selected Date: " + selectedDate + "\nSelected Month: " + selectedMonth + "\nSelected Year: " + selectedYear);

            // You can now use these values to filter the data on the client side
            // Alternatively, you can make an AJAX request to the server to get the filtered data
        });
    });
</script>